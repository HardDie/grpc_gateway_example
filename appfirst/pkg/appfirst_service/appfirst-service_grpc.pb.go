// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: appfirst-service.proto

package appfirst_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppFirstService_Hello_FullMethodName = "/appfirst_service.AppFirstService/Hello"
)

// AppFirstServiceClient is the client API for AppFirstService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppFirstServiceClient interface {
	// Get hello message
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type appFirstServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppFirstServiceClient(cc grpc.ClientConnInterface) AppFirstServiceClient {
	return &appFirstServiceClient{cc}
}

func (c *appFirstServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, AppFirstService_Hello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppFirstServiceServer is the server API for AppFirstService service.
// All implementations must embed UnimplementedAppFirstServiceServer
// for forward compatibility
type AppFirstServiceServer interface {
	// Get hello message
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	mustEmbedUnimplementedAppFirstServiceServer()
}

// UnimplementedAppFirstServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppFirstServiceServer struct {
}

func (UnimplementedAppFirstServiceServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedAppFirstServiceServer) mustEmbedUnimplementedAppFirstServiceServer() {}

// UnsafeAppFirstServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppFirstServiceServer will
// result in compilation errors.
type UnsafeAppFirstServiceServer interface {
	mustEmbedUnimplementedAppFirstServiceServer()
}

func RegisterAppFirstServiceServer(s grpc.ServiceRegistrar, srv AppFirstServiceServer) {
	s.RegisterService(&AppFirstService_ServiceDesc, srv)
}

func _AppFirstService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppFirstServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppFirstService_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppFirstServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppFirstService_ServiceDesc is the grpc.ServiceDesc for AppFirstService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppFirstService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appfirst_service.AppFirstService",
	HandlerType: (*AppFirstServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _AppFirstService_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appfirst-service.proto",
}
