// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: gateway-service-appsecond.proto

package gateway_service

import (
	context "context"
	appsecond_service "github.com/HardDie/grpc_gateway_example/appsecond/pkg/appsecond_service"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppSecond_Hello_FullMethodName = "/gateway.AppSecond/Hello"
)

// AppSecondClient is the client API for AppSecond service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppSecondClient interface {
	Hello(ctx context.Context, in *appsecond_service.HelloRequest, opts ...grpc.CallOption) (*appsecond_service.HelloResponse, error)
}

type appSecondClient struct {
	cc grpc.ClientConnInterface
}

func NewAppSecondClient(cc grpc.ClientConnInterface) AppSecondClient {
	return &appSecondClient{cc}
}

func (c *appSecondClient) Hello(ctx context.Context, in *appsecond_service.HelloRequest, opts ...grpc.CallOption) (*appsecond_service.HelloResponse, error) {
	out := new(appsecond_service.HelloResponse)
	err := c.cc.Invoke(ctx, AppSecond_Hello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppSecondServer is the server API for AppSecond service.
// All implementations must embed UnimplementedAppSecondServer
// for forward compatibility
type AppSecondServer interface {
	Hello(context.Context, *appsecond_service.HelloRequest) (*appsecond_service.HelloResponse, error)
	mustEmbedUnimplementedAppSecondServer()
}

// UnimplementedAppSecondServer must be embedded to have forward compatible implementations.
type UnimplementedAppSecondServer struct {
}

func (UnimplementedAppSecondServer) Hello(context.Context, *appsecond_service.HelloRequest) (*appsecond_service.HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedAppSecondServer) mustEmbedUnimplementedAppSecondServer() {}

// UnsafeAppSecondServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppSecondServer will
// result in compilation errors.
type UnsafeAppSecondServer interface {
	mustEmbedUnimplementedAppSecondServer()
}

func RegisterAppSecondServer(s grpc.ServiceRegistrar, srv AppSecondServer) {
	s.RegisterService(&AppSecond_ServiceDesc, srv)
}

func _AppSecond_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appsecond_service.HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppSecondServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppSecond_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppSecondServer).Hello(ctx, req.(*appsecond_service.HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppSecond_ServiceDesc is the grpc.ServiceDesc for AppSecond service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppSecond_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.AppSecond",
	HandlerType: (*AppSecondServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _AppSecond_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway-service-appsecond.proto",
}
